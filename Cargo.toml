[package]
name = "bevy-demo"
authors = ["Yusong Lai <yusong.lai@icloud.com>"]
repository = "https://github.com/whisperpine/bevy-demo"
description = "A demo project following the Rust and WebAssembly Book"
license = "MIT OR Apache-2.0"
readme = "README.md"
edition = "2024"

# rustc lints (https://doc.rust-lang.org/rustc/lints/index.html)
[lints.rust]
# lint groups (https://doc.rust-lang.org/rustc/lints/groups.html)
rust-2024-compatibility = { level = "warn", priority = -1 }
future-incompatible = { level = "deny", priority = -1 }
deprecated-safe = { level = "deny", priority = -1 }
# lint listing (https://doc.rust-lang.org/rustc/lints/listing/index.html)
missing_debug_implementations = "deny"
unreachable_pub = "deny"
unsafe_code = "forbid"

# rustdoc lints (https://doc.rust-lang.org/rustdoc/lints.html)
[lints.rustdoc]
broken_intra_doc_links = "deny"
unescaped_backticks = "deny"

# clippy lints (https://rust-lang.github.io/rust-clippy/master/index.html)
[lints.clippy]
inefficient_to_string = "warn"
rest_pat_in_fully_bound_structs = "warn"
match_wildcard_for_single_variants = "warn"
fn_params_excessive_bools = "warn"
unnested_or_patterns = "warn"
verbose_file_reads = "warn"
uninlined_format_args = "warn"
needless_continue = "warn"
allow_attributes = "warn"
lossy_float_literal = "warn"
option_option = "warn"
macro_use_imports = "warn"
str_to_string = "warn"
match_on_vec_items = "warn"
suboptimal_flops = "warn"
enum_glob_use = "warn"
filter_map_next = "warn"
imprecise_flops = "warn"
unused_self = "warn"
empty_enum = "warn"
linkedlist = "warn"
mem_forget = "warn"
exit = "warn"

###---------- profile.dev ----------###
[profile.dev]
# Enable a small amount of optimization in debug mode.
opt-level = 1
[profile.dev.package."*"]
# Enable high optimizations for dependencies (including Bevy).
opt-level = 3

###---------- profile.release ----------###
[profile.release]
lto = "thin"
strip = "symbols"
panic = "abort"

###---------- profile.wasm-release ----------###
[profile.wasm-release]
inherits = "release"
# rustc supports two "optimize for size" levels:  opt-level = "s" and "z".
# These names were inherited from clang / LLVM and are not too descriptive
# but "z" is meant to give the idea that it produces smaller binaries than "s".
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html#optimize-for-size
opt-level = "z"
# by compiling as a single codegen unit (i.e. not in parallel),
# it's possible to reduce size even further at the expense of
# compilation time
codegen-units = 1
# by enabling link-time optimization, we can reduce size even further
# by telling cargo to optimize at the link stage (in addition to the
# normal optimizations during the compilation stage)
lto = true
# by overriding our dependencies' compilation settings, we can further optimize for size
# https://docs.rust-embedded.org/book/unsorted/speed-vs-size.html#optimizing-dependencies
[profile.wasm-release.package."*"]
codegen-units = 1
opt-level = "z"

[dependencies]
anyhow = "1.0.96"
bevy = "0.15.3"
rand = "0.9.0"
